#!/bin/sh
# postinst script
#
# see: dh_installdeb(1)

set -e
#set -x  # Enable debugging
APP_ID="pantos-service-node"
RUN_AS="pantos-service-node"

. "/etc/default/$APP_ID"

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Source debconf library.
. /usr/share/debconf/confmodule

# Directory and file paths
application_directory='/opt/pantos/pantos-service-node'
base_directory='/etc/pantos'
env_file="${base_directory}/service-node-config.env"
signer_key_file="${base_directory}/service-node-signer.pem"

# User names
postgresql_user=${RUN_AS}
rabbitmq_user=${RUN_AS}

# Database and virtual host names
application_database=${RUN_AS}
celery_database="${RUN_AS}-celery"
virtual_host=${RUN_AS}

# These are optional dependencies, so we don't want to fail the installation if they are not installed
POSTGRESQL_INSTALLED=$(dpkg-query -W --showformat='${Status}\n' postgresql | grep "install ok installed" || true)
RABBITMQ_INSTALLED=$(dpkg-query -W --showformat='${Status}\n' rabbitmq-server | grep "install ok installed" || true)

_install_env() {
  if [ -e ${env_file} ]; then
    echo "${DPKG_MAINTSCRIPT_PACKAGE} Sourcing previous environment file"
    . ${env_file}
  else
    echo "${DPKG_MAINTSCRIPT_PACKAGE} Previous environment file doesn't exist. Skipping."
  fi
}

_create_signer_key() {
  # Signer key
  if [ ! -e ${signer_key_file} ] || [ -z ${SIGNER_KEY_PASSWORD} ]; then
    db_get pantos/service-node/create_signer_key
    # Only ask for the password if the above is positive
    if [ "$RET" = "false" ]; then
      echo "${DPKG_MAINTSCRIPT_PACKAGE} Not creating a new signer key"
      return
    fi
    db_get pantos/service-node/signer_key_password
    # Check if ssh-keygen is installed
    if command -v ssh-keygen &>/dev/null; then
      echo "${DPKG_MAINTSCRIPT_PACKAGE} Signer key does not exist; generating a new one"
      ssh-keygen -t ed25519 -f "$signer_key_file" -N "$RET" >/dev/null 2>&1
      chown "$RUN_AS":daemon "$signer_key_file"
      chmod 640 "$signer_key_file"
      echo "SIGNER_KEY_PASSWORD='$RET'" >> "${env_file}"
    else
      echo -e "\033[1;32m${DPKG_MAINTSCRIPT_PACKAGE} ssh-keygen is not installed, please reinstall the"\
      "package with the recommended dependencies or make sure that the signer"\
      "key is provided as an environment variable at run time\033[0m"
    fi
  fi
}

_configure_postgresql() {
  db_get pantos/common/configure_postgresql
  # If Postgresql doesn't exist, check for the configuration to exist and otherwise show a big warning
  if [ "$RET" != "false" ] && [ -n "$POSTGRESQL_INSTALLED" ]; then
    # Try to connect to the database and break otherwise
    if ! timeout 10 su postgres -c "psql --quiet --command \"SELECT 1\"" >/dev/null 2>&1; then
      echo "Error connecting to PostgreSQL. Please configure it manually"
    else
      # If Postgresql exists, we check if the user and database exists and create them if not
      echo "PostgreSQL is installed"
      existing_postgresql_user=$(echo "${DB_URL}" | awk -F'[/:@]' '{print $4}')
      existing_postgresql_password=$(echo "${DB_URL}" | awk -F'[/:@]' '{print $5}')
      # Check if we can connect to PostgreSQL using the DB_URL
      if PGPASSWORD=$existing_postgresql_password su postgres -c "psql -U $existing_postgresql_user -d postgres -c \"SELECT 1\"" >/dev/null 2>&1; then
        echo "${DPKG_MAINTSCRIPT_PACKAGE} Successfully connected to PostgreSQL with DB_URL credentials."
        postgresql_user=$existing_postgresql_user
      else
        postgresql_user_exists=$(su postgres -c "psql --no-align --no-psqlrc --tuples-only --quiet --command \"SELECT 1 FROM pg_roles WHERE rolname='${postgresql_user}'\" | grep --quiet --word-regexp ^1; echo \$?")
        if [ "${postgresql_user_exists}" -eq 0 ]; then
          echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL user '${postgresql_user}' already exists, generating new PostgreSQL password"
          postgresql_password=`< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1`
          su postgres -c "psql --quiet --command \"ALTER ROLE \\\"${postgresql_user}\\\" WITH PASSWORD '${postgresql_password}'\""
          echo "DB_URL='postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node'" >> "${env_file}"
          echo "CELERY_BACKEND='db+postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node-celery'" >> "${env_file}"
          echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL user '${postgresql_user}' password updated"
        else
          echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL user '${postgresql_user}' does not exist, generating user and password"
          postgresql_password=`< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1`
          su postgres -c "psql --quiet --command \"CREATE ROLE \\\"${postgresql_user}\\\" WITH LOGIN PASSWORD '${postgresql_password}'\""
          echo "DB_URL='postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node'" >> "${env_file}"
          echo "CELERY_BACKEND='db+postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node-celery'" >> "${env_file}"
          echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL user '${postgresql_user}' created"
        fi
      fi
      if su postgres -c "psql --no-align --no-psqlrc --tuples-only --quiet --list" | cut --delimiter \| --fields 1 | grep --quiet --word-regexp "^${application_database}$"; then
        echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL application database '${application_database}' already exists"
      else
        su postgres -c "psql --quiet --command \"CREATE DATABASE \\\"${application_database}\\\" WITH OWNER \\\"${postgresql_user}\\\"\""
        echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL application database '${application_database}' created"
      fi
      if su postgres -c "psql --no-align --no-psqlrc --tuples-only --quiet --list" | cut --delimiter \| --fields 1 | grep --quiet --word-regexp "^${celery_database}$"; then
        echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL Celery database '${celery_database}' already exists"
      else
        su postgres -c "psql --quiet --command \"CREATE DATABASE \\\"${celery_database}\\\" WITH OWNER \\\"${postgresql_user}\\\"\""
        echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL Celery database '${celery_database}' created"
      fi
    fi
  else
    echo "${DPKG_MAINTSCRIPT_PACKAGE} PostgreSQL is not installed or configuration has been manually skipped."
  fi
}

_configure_rabbitmq() {
  db_get pantos/common/configure_rabbitmq
  if [ "$RET" != "false" ] && [ -n "$RABBITMQ_INSTALLED" ]; then
    # Try to connect to the RabbitMQ server and break otherwise
    if ! timeout 10 rabbitmqctl list_users >/dev/null 2>&1; then
      echo "${DPKG_MAINTSCRIPT_PACKAGE} Error checking if RabbitMQ user exists. Please configure it manually"
    else
      echo "RabbitMQ is installed"
      # Check if we can connect to RabbitMQ using the amqp URL
      existing_rabbitmq_user=$(echo "${CELERY_BROKER}" | awk -F'[/:@]' '{print $4}')
      existing_rabbitmq_password=$(echo "${CELERY_BROKER}" | awk -F'[/:@]' '{print $5}')
      if timeout 10 rabbitmqadmin -u "${existing_rabbitmq_user}" -p "${existing_rabbitmq_password}" list vhosts >/dev/null 2>&1; then
        echo "${DPKG_MAINTSCRIPT_PACKAGE} RabbitMQ user exists and password is defined in ${env_file}"
        rabbitmq_user=$existing_rabbitmq_user
      else
        echo "${DPKG_MAINTSCRIPT_PACKAGE} Can't connect to RabbitMQ using the existing user and password. Configuring $rabbitmq_user with a new password"
        if rabbitmqctl list_users | grep --quiet --word-regexp "^${rabbitmq_user}$"; then
          echo "${DPKG_MAINTSCRIPT_PACKAGE} RabbitMQ user '${rabbitmq_user}' already exists, generating new RabbitMQ password"
          rabbitmq_password=`< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1`
          rabbitmqctl change_password "${rabbitmq_user}" "${rabbitmq_password}"
          echo "CELERY_BROKER='amqp://${rabbitmq_user}:${rabbitmq_password}@localhost:5672/pantos-service-node'" >> "${env_file}"
        else
          echo "${DPKG_MAINTSCRIPT_PACKAGE} RabbitMQ user does not exist, generating new RabbitMQ user and password"
          rabbitmq_password=`< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1`
          rabbitmqctl add_user "${rabbitmq_user}" "${rabbitmq_password}"
          echo "CELERY_BROKER='amqp://${rabbitmq_user}:${rabbitmq_password}@localhost:5672/pantos-service-node'" >> "${env_file}"
        fi
      fi
      if rabbitmqctl list_vhosts | grep --quiet --word-regexp "^${virtual_host}$"; then
        echo "${DPKG_MAINTSCRIPT_PACKAGE} RabbitMQ virtual host '${virtual_host}' already exists"
      else
        rabbitmqctl add_vhost ${virtual_host}
        rabbitmqctl set_permissions -p ${virtual_host} ${rabbitmq_user} ".*" ".*" ".*"
        echo "${DPKG_MAINTSCRIPT_PACKAGE} RabbitMQ virtual host '${virtual_host}' added"
      fi
    fi
  else
    echo "${DPKG_MAINTSCRIPT_PACKAGE} RabbitMQ is not installed or configuration has been manually skipped."
  fi
}

_check_systemd_active() {
  if ! systemctl --version >/dev/null 2>&1; then
    echo "Systemd is not active, skipping service start"
    return 1
  fi
  return 0
}

_start_and_wait_for_service() {
  local service_name="$1"
  
  if _check_systemd_active; then
    if ! systemctl start "$service_name"; then
      echo "Failed to start $service_name. Please start it manually"
      return
    fi
    echo "Waiting for $service_name to be ready..."
    while ! systemctl is-active --quiet "$service_name"; do
      sleep 1
    done
    echo "$service_name is now active."
  else
    return
  fi
}

_wait_for_rabbitmq() {
  if [ -n "$RABBITMQ_INSTALLED" ]; then
    _start_and_wait_for_service "rabbitmq-server"
  fi
}

_wait_for_postgresql() {
  if [ -n "$POSTGRESQL_INSTALLED" ]; then
    _start_and_wait_for_service "postgresql"
  fi
}

SERVICES="pantos-service-node-server pantos-service-node-celery"

_stop_services() {
  systemctl stop $SERVICES
}

_start_services() {
  db_get pantos/common/start_services
  if [ $RET != "false" ] && _check_systemd_active; then
    echo "Starting services..."
    systemctl daemon-reload
    systemctl enable $SERVICES
    systemctl start $SERVICES
  fi
}


case "$1" in
    configure)
        if ! getent passwd "$RUN_AS" >/dev/null; then
            adduser --quiet --system --ingroup daemon --no-create-home \
                    --home "/var/opt/$APP_ID" --shell /usr/sbin/nologin "$RUN_AS"
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    triggered)
    ;;

    *)
        echo "${DPKG_MAINTSCRIPT_PACKAGE}: postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

# Protect configuration files (containing passwords)
chmod 0640 /etc/pantos/service-node*
chgrp daemon /etc/pantos/service-node*

# Data and log directory permissions
chown -RPh "$RUN_AS":daemon /var/log/pantos/service-node/. /opt/pantos/"$APP_ID"/.

# Run upgrade / start service AFTER permissions etc. are fixed
if [ "$1" = "configure" ]; then
    _stop_services "$2"
    _install_env "$2"
    _create_signer_key "$2"
    _wait_for_postgresql "$2"
    _configure_postgresql "$2"
    _wait_for_rabbitmq "$2"
    _configure_rabbitmq "$2"
    _start_services "$2"
    db_input high pantos/configurator/finish_note || true
    db_go || true
fi

exit 0