#! /bin/bash

set -e # Exit on error
#set -x # Enable debugging

# Source debconf library.
. /usr/share/debconf/confmodule

PACKAGE_NAME="pantos-service-node"
VERSION=$(dpkg-query --showformat='${Version}' --show $PACKAGE_NAME)
echo "Package version is $VERSION"

application_name='Pantos Service Node'

# Directory and file paths
application_directory='/opt/pantos/service-node'
log_directory='/var/log/pantos'
base_directory='/etc/pantos'
configuration_file="${base_directory}/service-node-config.yml"
old_configuration_file="${configuration_file}.old_$(date +%Y%m%d_%H%M%S)"
env_file="${base_directory}/service-node-config.env"
old_env_file="${env_file}.old_$(date +%Y%m%d_%H%M%S)"
offchain_bids_default_file="${base_directory}/service-node-bids.yml"
old_offchain_bids_default_file="${offchain_bids_default_file}.old_$(date +%Y%m%d_%H%M%S)"
alembic_file="${base_directory}/service-node-alembic.ini"
old_alembic_file="${alembic_file}.old_$(date +%Y%m%d_%H%M%S)"
startup_script_file="${application_directory}/start-web-server"
signer_key_file="${base_directory}/service-node-signer.pem"
db_get pantos/common/create_backups
CREATE_BACKUPS=1
if [ "$RET" == "false" ]; then
  echo "Not creating backups"
  CREATE_BACKUPS=0
fi

db_get pantos/common/reset_users
RESET_USERS=1
if [ "$RET" == "false" ]; then
  echo "Not resetting users"
  RESET_USERS=0
fi


# User names
postgresql_user='pantos-service-node'
rabbitmq_user='pantos-service-node'
system_user='pantos'

# Database and virtual host names
application_database='pantos-service-node'
celery_database='pantos-service-node-celery'
virtual_host='pantos-service-node'

if pidof systemd > /dev/null; then
  echo "systemd is active."
  SYSTEMD_ACTIVE=1
else
  echo "systemd is not active."
  SYSTEMD_ACTIVE=0
fi
# These are optional dependencies, so we don't want to fail the installation if they are not installed
POSTGRESQL_INSTALLED=$(dpkg-query -W --showformat='${Status}\n' postgresql | grep "install ok installed" || true)
RABBITMQ_INSTALLED=$(dpkg-query -W --showformat='${Status}\n' rabbitmq-server | grep "install ok installed" || true)
# Start postgresql and rabbitmq if systemctl is installed and they are installed too
if [ $SYSTEMD_ACTIVE == 1 ]; then
  if [ -n "$(systemctl list-units --type=service | grep postgresql)" ]; then
    systemctl start postgresql || true
  fi
  if [ -n "$(systemctl list-units --type=service | grep rabbitmq-server)" ]; then
    systemctl start rabbitmq-server || true
  fi
  # Stop pantos services
  systemctl stop pantos-service-node-server || true
  systemctl stop pantos-service-node-celery || true
fi

# System user
system_user_exists=$(id ${system_user} >/dev/null 2>&1; echo $?)
if [ "${system_user_exists}" -eq 0 ]; then
  echo "${application_name} system user '${system_user}' already exists"
else
  adduser --system --no-create-home --group --quiet ${system_user}
  echo "${application_name} system user '${system_user}' added"
fi

mkdir -p ${base_directory}
chown -R ${system_user}:${system_user} ${base_directory}
chmod -R 640 ${base_directory}
chmod 740 ${base_directory}

# Application
echo "Installing ${application_name} application"
rm --force ${application_directory}/wsgi.py
rm --recursive --force ${application_directory}/virtual-environment/
python3 -m venv ${application_directory}/virtual-environment
source ${application_directory}/virtual-environment/bin/activate
python3 -m pip install ${application_directory}/pantos_service_node-$VERSION-py3-none-any.whl
python3 -m pip install mod_wsgi
deactivate
rm ${application_directory}/pantos_service_node-$VERSION-py3-none-any.whl
ln --symbolic virtual-environment/lib/$(ls ${application_directory}/virtual-environment/lib/ | grep python3)/site-packages/pantos/servicenode/wsgi.py ${application_directory}/wsgi.py
echo "${application_name} application installed in ${application_directory}"

# Startup script
chmod +x ${startup_script_file}

# Configuration
if [ -e ${configuration_file} ] && [ $CREATE_BACKUPS -eq 1 ]; then
  cp ${configuration_file} ${old_configuration_file}
  echo "Backed up ${application_name} configuration file to ${old_configuration_file}"
fi
cp ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/service-node-config.yml ${configuration_file}
chown ${system_user}:${system_user} ${configuration_file}
chmod 640 ${configuration_file}
echo "${application_name} configuration file installed at ${configuration_file}"

if [ -e ${env_file} ]; then
  if [ $CREATE_BACKUPS -eq 1 ]; then
    cp ${env_file} ${old_env_file}
    echo "Backed up ${application_name} environment to ${old_env_file}"
  fi
  source ${env_file}
else
  echo "Environment file does not exist, creating new one"
  cp ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/service-node-config.env ${env_file}
  chown ${system_user}:${system_user} ${env_file}
  chmod 640 ${env_file}
  echo "Make sure to fill the empty values in ${env_file} before starting the server"
fi

# Signer key
if [ ! -e ${signer_key_file} ] || [ -z ${SIGNER_KEY_PASSWORD} ]; then
  db_get pantos/service-node/create_signer_key
  # Only ask for the password if the above is positive
  if [ "$RET" == "false" ]; then
    echo "Not creating a new signer key"
    break
  fi
  db_get pantos/service-node/signer_key_password
  # Check if ssh-keygen is installed
  if command -v ssh-keygen &>/dev/null; then
    echo "Signer key does not exist; generating a new one"
    ssh-keygen -t ed25519 -f "$signer_key_file" -N "$RET" >/dev/null 2>&1
    echo "SIGNER_KEY_PASSWORD='$RET'" >> "${env_file}"
  else
    echo -e "\033[1;32mssh-keygen is not installed, please reinstall the"\
    "package with the recommended dependencies or make sure that the signer"\
    "key is provided as an environment variable at run time\033[0m"
  fi
fi

# Offchain bids
if [ -e "${offchain_bids_default_file}" ] && [ $CREATE_BACKUPS -eq 1 ]; then
  cp ${offchain_bids_default_file} ${old_offchain_bids_default_file}
  echo "Backed up ${application_name} offchain bids file to ${old_offchain_bids_default_file}"
fi
cp ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/bids.yml ${offchain_bids_default_file}
chown ${system_user}:${system_user} ${offchain_bids_default_file}
chmod 640 ${offchain_bids_default_file}
echo "${application_name} offchain bids file installed at ${offchain_bids_default_file}"


# Alembic configuration
if [ -e "${alembic_file}" ] && [ $CREATE_BACKUPS -eq 1 ]; then
  cp ${alembic_file} ${old_alembic_file}
  echo "Backed up ${application_name} alembic configuration file to ${old_alembic_file}"
fi
mv ${application_directory}/virtual-environment/lib/python3.*/site-packages/pantos/alembic.ini ${alembic_file}
chown ${system_user}:${system_user} ${alembic_file}
chmod 640 ${alembic_file}
echo "${application_name} configuration file installed at ${alembic_file}"

# Logs
mkdir --parents ${log_directory}
chown ${system_user}:adm ${log_directory}
chmod 750 ${log_directory}
echo "${application_name} log file directory set up at ${log_directory}"

db_get pantos/common/configure_postgresql
# If Postgresql doesn't exist, check for the configuration to exist and otherwise show a big warning
if [ "$RET" != "false" ] && [ -n "$POSTGRESQL_INSTALLED" ]; then
  # Try to connect to the database and break otherwise
  if ! timeout 10 runuser -u postgres -- psql --quiet --command "SELECT 1"; then
    echo "Error connecting to PostgreSQL. Please configure it manually"
  else
    # If Postgresql exists, we check if the user and database exists and create them if not
    # We also check if the old configuration file exists and copy the old database URLs to the new configuration file
    echo -e "\033[1;32mPostgreSQL is installed\033[0m"
    postgresql_user_exists=$(runuser -u postgres -- psql --no-align --no-psqlrc --tuples-only --quiet --command "SELECT 1 FROM pg_roles WHERE rolname='${postgresql_user}'" | grep --quiet --word-regexp ^1; echo $?)
    if [ "${postgresql_user_exists}" -eq 0 ]; then
      echo "${application_name} PostgreSQL user '${postgresql_user}' already exists"
      if [ -z "${DB_URL}" ] && [ $RESET_USERS -eq 1 ]; then
        echo "DB_URL does not exist, generating new PostgreSQL password"
        # config doesn't exist but the database user exists, so we generate a new password
        postgresql_password=$(< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)
        runuser -u postgres -- psql --quiet --command "ALTER ROLE \"${postgresql_user}\" WITH PASSWORD '${postgresql_password}'"
        echo "DB_URL='postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node'" >> ${env_file}
        echo "CELERY_BACKEND='db+postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node-celery'" >> ${env_file}
      fi
    else
      echo "PostgreSQL user does not exist, generating new PostgreSQL user and password"
      postgresql_password=$(< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)
      runuser -u postgres -- psql --quiet --command "CREATE ROLE \"${postgresql_user}\" WITH LOGIN PASSWORD '${postgresql_password}'"
      echo "DB_URL='postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node'" >> ${env_file}
      echo "CELERY_BACKEND='db+postgresql://${postgresql_user}:${postgresql_password}@localhost/pantos-service-node-celery'" >> ${env_file}
      echo "${application_name} PostgreSQL user '${postgresql_user}' created"
    fi
    application_database_exists=$(runuser -u postgres -- psql --no-align --no-psqlrc --tuples-only --quiet --list | cut --delimiter \| --fields 1 | grep --quiet --word-regexp "^${application_database}"; echo $?)
    if [ "${application_database_exists}" -eq 0 ]; then
      echo "${application_name} PostgreSQL application database '${application_database}' already exists"
    else
      runuser -u postgres -- psql --quiet --command "CREATE DATABASE \"${application_database}\" WITH OWNER \"${postgresql_user}\""
      echo "${application_name} PostgreSQL application database '${application_database}' created"
    fi
    celery_database_exists=$(runuser -u postgres -- psql --no-align --no-psqlrc --tuples-only --quiet --list | cut --delimiter \| --fields 1 | grep --quiet --word-regexp "^${celery_database}"; echo $?)
    if [ "${celery_database_exists}" -eq 0 ]; then
      echo "${application_name} PostgreSQL Celery database '${celery_database}' already exists"
    else
      runuser -u postgres -- psql --quiet --command "CREATE DATABASE \"${celery_database}\" WITH OWNER \"${postgresql_user}\""
      echo "${application_name} PostgreSQL Celery database '${celery_database}' created"
    fi
  fi
else
  echo -e "\033[1;31mPostgreSQL is not installed or configuration has been manually skipped.\033[0m"
fi

db_get pantos/common/configure_rabbitmq
if [ "$RET" != "false" ] && [ -n "$RABBITMQ_INSTALLED" ]; then
  # Try to connect to the RabbitMQ server and break otherwise
  if ! timeout 10 rabbitmqctl list_users; then
    echo "Error checking if RabbitMQ user exists. Please configure it manually"
  else
    echo -e "\033[1;32mRabbitMQ is installed\033[0m"
    echo "Checking if the user and virtual host exist and creating them if not"
    # RabbitMQ
    rabbitmq_user_exists=$(rabbitmqctl list_users | grep --quiet --word-regexp "^${rabbitmq_user}"; echo $?)
    if [ "${rabbitmq_user_exists}" -eq 0 ]; then
      echo "${application_name} RabbitMQ user '${rabbitmq_user}' already exists"
      if [ -z "${CELERY_BROKER}" ]; then
        if [ $RESET_USERS -eq 1 ]; then
          # old config does not exist but the rabbitmq user exists, so we generate a new password
          # and change the password of the user
          echo "Env variable CELERY_BROKER is not defined, generating new RabbitMQ password"
          rabbitmq_password=$(< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)
          rabbitmqctl change_password "${rabbitmq_user}" "${rabbitmq_password}"
          echo "CELERY_BROKER='amqp://${rabbitmq_user}:${rabbitmq_password}@localhost:5672/pantos-service-node'" >> ${env_file}
        else
          echo "RabbitMQ user exists, but no password is defined in ${env_file}"
          echo "Please define CELERY_BROKER in ${env_file}"
        fi
      fi
    else
      echo "RabbitMQ user does not exist, generating new RabbitMQ user and password"
      rabbitmq_password=$(< /dev/urandom tr -dc 'A-Za-z0-9' | fold -w 32 | head -n 1)
      rabbitmqctl add_user "${rabbitmq_user}" "${rabbitmq_password}"
      echo "CELERY_BROKER='amqp://${rabbitmq_user}:${rabbitmq_password}@localhost:5672/pantos-service-node'" >> ${env_file}
    fi
    virtual_host_exists=$(rabbitmqctl list_vhosts | grep --quiet --word-regexp "^${virtual_host}"; echo $?)
    if [ "${virtual_host_exists}" -eq 0 ]; then
      echo "${application_name} RabbitMQ virtual host '${virtual_host}' already exists"
    else
      echo "${application_name} RabbitMQ virtual host does not exist, creating new RabbitMQ virtual host"
      rabbitmqctl add_vhost ${virtual_host}
      rabbitmqctl set_permissions -p ${virtual_host} ${rabbitmq_user} ".*" ".*" ".*"
      echo "${application_name} RabbitMQ virtual host '${virtual_host}' added"
    fi
  fi
else
  echo -e "\033[1;31mRabbitMQ is not installed or configuration has been manually skipped.\033[0m"
fi

chown -R ${system_user}:${system_user} ${base_directory}
if [ $SYSTEMD_ACTIVE == 1 ]; then
  systemctl daemon-reload || true
fi

echo
echo "${application_name} installation finished"
echo
echo -e "\033[1;33mImportant:\033[0m Review the ${application_name} configuration and file dependencies before starting the server:"
echo "- Environment variables in ${env_file}"
echo "- Keystore files (e.g. at /etc/pantos/service-node.keystore)"
echo "- SSL certificate and key files at /etc/pantos/service-node-fullchain.pem and /etc/pantos/service-node-privkey.pem"
echo "- ADVANCED CONFIGURATION: ${configuration_file}"
echo

db_get pantos/common/start_services
if [ "$RET" == "false" ] || [ $SYSTEMD_ACTIVE -eq 0 ]; then
  echo "Not starting services, start them manually and on restart with:"
  echo "sudo systemctl enable --now pantos-service-node-server"
  echo "sudo systemctl enable --now pantos-service-node-celery"
else
  echo "Starting services"
  systemctl enable --now pantos-service-node-server || true
  systemctl enable --now pantos-service-node-celery || true
  echo "Started ${application_name} server and worker"
fi
echo "Check the status with:"
echo "sudo systemctl status pantos-service-node-server"
echo "sudo systemctl status pantos-service-node-celery"
echo "Check the logs with:"
echo "sudo journalctl -u pantos-service-node-server"
echo "sudo journalctl -u pantos-service-node-celery"
echo
echo "For more in-depth logs, see: ${log_directory}"
echo
