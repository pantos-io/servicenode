#! /bin/sh
#
# Helper to launch the celery worker

APP_NAME=pantos-service-node
APP_DIR=/opt/pantos/"$APP_NAME"
export PYTHONHOME=$APP_DIR
export PATH=$APP_DIR/bin:$PATH
export PYTHONUNBUFFERED=1

source_if_not_set() {
    [ ! -f "$1" ] && return
    echo "Sourcing $1"
    while IFS= read -r line || [ -n "$line" ]; do
        [ -z "$line" ] || [ "${line#\#}" != "$line" ] && continue
        key="${line%%=*}"
        eval currentValue=\$$key
        [ -n "$currentValue" ] && continue
        export "$line"
    done < "$1"
}

source_if_not_set /etc/default/"$APP_NAME"

cd "$APP_DIR"

while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      echo "Usage: $0 [-h|--help] [-s|--status]"
      echo "-h, --help   Show this help message"
      echo "-s, --status Start the celery worker with status monitoring"
      exit 0
      ;;
    -s|--status)
      echo "Querying the status of the celery worker"
      ./bin/python -m celery -A pantos.servicenode report
      status=$?
      if [ $status -ne 0 ]; then
        echo "Status: UNHEALTHY, exit code: $status"
      else
        echo "Status: HEALTHY"
      fi
      exit $status
      ;;
    *)
      break
      ;;
  esac
done

if [ -n "$PANTOS_STATUS_MONITOR" ]; then
    echo "Starting the status monitor"
    exec ./bin/python -m celery -A pantos.servicenode flower &
fi

# Check if the current user is not "pantos-service-node" and if so, switch to that user
# This can happen when started directly from the command line
EXTRA_ARGS=""
if [ "$(id -u)" -ne "$(id -u "$APP_NAME")" ]; then
    EXTRA_ARGS="--uid $(id -u "$APP_NAME")"
fi

while true; do
  echo "Starting the celery worker"
  ./bin/python -m celery -A pantos.servicenode worker $EXTRA_ARGS -l INFO -n pantos.servicenode -Q transfers,bids
  PYTHON_EXIT_CODE=$?

  if [ "$PANTOS_CELERY_AUTORESTART" != "true" ]; then
    echo "Auto-restart is disabled. Exiting with code $PYTHON_EXIT_CODE."
    exit $PYTHON_EXIT_CODE
  fi

  echo "Celery worker exited with code $?. Respawning.." >&2
  sleep 1
done
