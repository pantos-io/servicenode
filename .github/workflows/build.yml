name: Build Debian Package
on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: false
        type: string
        default: "1.0.0"
      environment:
        description: 'Environment where the secrets are stored'
        required: false
        type: string
      architecture:
        description: 'Architecture to build'
        required: false
        type: string
        default: "amd64"
    secrets:
      GPG_PRIVATE_KEY:
        description: 'GPG private key'
        required: false
      GPG_PASSPHRASE:
        description: 'GPG passphrase'
        required: false

jobs:
  build-deb:
    name: Build and attach .deb and .whl packages
    # TODO: Change ubuntu-20.04 for the ARM public runner
    runs-on: ${{ inputs.architecture == 'amd64' && 'ubuntu-latest' || 'ubuntu-20.04' }}
    environment: ${{ inputs.environment }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: step-security/harden-runner@v2
        with:
          disable-sudo: false
          egress-policy: audit
      - uses: actions/checkout@v4

      - name: Set up Poetry
        uses: pantos-io/ci-workflows/.github/actions/install-poetry@v1
        with:
          python-version: ${{ matrix.python-version }}
          runner-os: ${{ inputs.architecture == 'amd64' && 'ubuntu-latest' || 'ubuntu-20.04' }}

      - name: Check secrets
        id: is-signed-build
        run: |
          echo "HAS_SECRETS=$(if [ -n "$GPG_PRIVATE_KEY" ] && [ -n "$GPG_PASSPHRASE" ]; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_OUTPUT
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Import GPG key
        if: steps.is-signed-build.outputs.HAS_SECRETS == 'true'
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Install conda dependencies
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
              MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh";
          elif [ "$ARCH" = "aarch64" ]; then
              MINICONDA_URL="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh";
          else
              echo "Unsupported architecture: $ARCH";
              exit 1;
          fi
          wget "$MINICONDA_URL" -O miniconda.sh
          bash miniconda.sh -b
          rm -f miniconda.sh
        shell: sh

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3-venv dh-sysuser dh-exec -y
          sudo make debian-build-deps

      - name: Install signing dependencies
        if: steps.is-signed-build.outputs.HAS_SECRETS == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y debsigs

      - name: Ensure version
        if: steps.is-signed-build.outputs.HAS_SECRETS == 'true'
        run: |
          make check-version VERSION=${{ inputs.version }}

      - name: Build package
        run: |
          make debian debian-configurator
          make wheel
        env:
          PANTOS_SERVICE_NODE_VERSION: ${{ inputs.version }}
        shell: sh

      - name: Sign package
        if: steps.is-signed-build.outputs.HAS_SECRETS == 'true'
        run: |
          debsigs --sign=origin -k ${{ steps.import-gpg.outputs.keyid }} dist/*.deb

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.architecture }}
          path: dist/*
